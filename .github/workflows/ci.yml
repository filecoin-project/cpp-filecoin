name: CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # 3 jobs in total
        os: [ubuntu-18.04, macOS-latest]
        compiler: [{
          "cc": "gcc",
          "cxx": "g++"
         }, {
          "cc": "clang",
          "cxx": "clang++"
        }]
        exclude:
          - os: macOS-latest
            compiler:
              cc: gcc
        include:
          - os: macOS-latest
            env:
              CFLAGS: "-I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include"
              CXXFLAGS: "-isysroot/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include"
    steps:
    - uses: actions/checkout@v2
      name: checkout repo
    - name: cache
      uses: actions/cache@v1.2.0
      env:
        cache-name: cache-filecoin-ffi-proofs
        version: v28
      with:
        path: /var/tmp/filecoin-proof-parameters
        key: build-${{ env.cache-name }}-${{ env.version }}
    - name: checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
    - name: install dependencies
      run: |
        set -e
        if [ "$RUNNER_OS" = "macOS" ]; then
          brew install ninja libb2
          brew install pkg-config
        else
          sudo apt-get update || true
          sudo apt-get install -y ninja-build python-setuptools pkg-config ocl-icd-* opencl-headers
        fi

        pip3 -V || sudo python3 -m pip install --upgrade pip
        sudo pip3 install scikit-build
        sudo pip3 install requests gitpython gcovr pyyaml
        sudo curl https://sh.rustup.rs -sSf | sh -s -- -y
    - name: cmake
      env:
        CC: ${{ matrix.compiler.cc }}
        CXX: ${{ matrix.compiler.cxx }}
        CFLAGS: ${{ matrix.env.CFLAGS }}
        CXXFLAGS: ${{ matrix.env.CXXFLAGS }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # has to be included to access other secrets
        GITHUB_HUNTER_USERNAME: ${{ secrets.GITHUB_HUNTER_USERNAME }}
        GITHUB_HUNTER_TOKEN: ${{ secrets.GITHUB_HUNTER_TOKEN }}
      run: cmake . -GNinja -Bbuild -D COVERAGE=ON -D TESTING_PROOFS=ON
    - name: build
      run: cmake --build build -- -j2
    - name: tests
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      run: cmake --build build --target test
    - name: prepare coverage report
      run: cmake --build build --target ctest_coverage
    - name: upload report to codecov
      uses: codecov/codecov-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # has to be included to access other secrets
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./build/ctest_coverage.xml
        name: codecov-umbrella
