/**
 * Copyright Soramitsu Co., Ltd. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef TEST_CORE_CODEC_LEB128_CODEC_TESTER_HPP
#define TEST_CORE_CODEC_LEB128_CODEC_TESTER_HPP

#include <gtest/gtest.h>

#include "codec/leb128/leb128.hpp"

template <typename T>
struct LEB128CodecTester : public testing::Test {
  /**
   * @brief Encoded sample for checking LEB128 algorithm
   *        { [VALUE], [ENCODED_SAMPLE] }
   */
  static std::pair<T, std::vector<uint8_t>> sample_;

  /**
   * @brief Check encoding/decoding integrity
   * @param value - data to encode/decode
   * @return true, if decoded data is the same as the original value
   */
  bool checkReversibility(const T &value) {
    const std::vector<uint8_t> &&encoded = fc::codec::leb128::encode(value);
    fc::outcome::result<T> decoded = fc::codec::leb128::decode<T>(encoded);
    return decoded ? value == decoded.value() : false;
  }

  /**
   * @brief Handle possible errors during decoding
   * @param encoded - data with invalid size
   * @param expectedError - code of the error
   * @return true, if received error code is the same as expected
   */
  bool checkDecodeFail(const std::vector<uint8_t> &encoded, int expectedError) {
    fc::outcome::result<T> result = fc::codec::leb128::decode<T>(encoded);
    std::error_code code = result.error();
    return !result ? expectedError == code.value() : false;
  }
};

/**
 * @brief LEB-128 encoded samples
 * @used https://github.com/fmoo/python-varint
 */
template <>
std::pair<uint8_t, std::vector<uint8_t>> LEB128CodecTester<uint8_t>::sample_{
    128, {0x80, 0x01}};

template <>
std::pair<uint16_t, std::vector<uint8_t>> LEB128CodecTester<uint16_t>::sample_{
    37000, {0x88, 0xA1, 0x02}};

template <>
std::pair<uint32_t, std::vector<uint8_t>> LEB128CodecTester<uint32_t>::sample_{
    3012345678u, {0xCE, 0xFE, 0xB2, 0x9C, 0x0B}};

template <>
std::pair<uint64_t, std::vector<uint8_t>> LEB128CodecTester<uint64_t>::sample_{
    12345678909876543210u,
    {0xEA, 0xBD, 0xE4, 0xF1, 0xEE, 0xB1, 0xAA, 0xAA, 0xAB, 0x01}};

template <>
std::pair<boost::multiprecision::uint128_t, std::vector<uint8_t>>
    LEB128CodecTester<boost::multiprecision::uint128_t>::sample_{
        boost::multiprecision::uint128_t{
            "321012345678909876543211234567890987650"},
        {0x82,
         0xD5,
         0xA3,
         0xE8,
         0x99,
         0xC5,
         0xCF,
         0xD4,
         0xEE,
         0xE9,
         0xC0,
         0xA7,
         0xF1,
         0xB2,
         0xA6,
         0xDD,
         0x80,
         0xE3,
         0x03}};

template <>
std::pair<boost::multiprecision::uint256_t, std::vector<uint8_t>>
    LEB128CodecTester<boost::multiprecision::uint256_t>::sample_{
        boost::multiprecision::uint256_t{
            "123456789012345678901234567890123456789012345678901234567890123456"
            "78901234560"},
        {0x80, 0x97, 0xFD, 0xE4, 0xE7, 0xB5, 0xE7, 0x88, 0xB1, 0x9F,
         0xE2, 0x92, 0xD4, 0xC9, 0x95, 0xF9, 0xC3, 0xCD, 0xEB, 0xCE,
         0xBE, 0xCF, 0xD8, 0x90, 0xCA, 0x9F, 0x82, 0xD1, 0xAE, 0xBF,
         0x84, 0x93, 0x99, 0xD0, 0xAD, 0xDA, 0x01}};

template <>
std::pair<boost::multiprecision::uint512_t, std::vector<uint8_t>>
    LEB128CodecTester<boost::multiprecision::uint512_t>::sample_{
        boost::multiprecision::uint512_t{
            "104078079299425970995740249982058461274793658205923933777235614437"
            "217640300735469768018742981669034276900318581864860508537538828119"
            "465699464336490060840"},
        {0xA8, 0xB8, 0xBD, 0x94, 0xDC, 0x9E, 0x8A, 0xAE, 0x8F, 0x85, 0xD7,
         0xC7, 0xC2, 0xEB, 0xA3, 0xE1, 0xF5, 0xD1, 0xF0, 0xFA, 0xA8, 0xC8,
         0xC4, 0xD7, 0xD7, 0x83, 0xD9, 0xA9, 0xB9, 0xD8, 0xF2, 0xAE, 0xAF,
         0xBD, 0xE1, 0xE5, 0x87, 0xD4, 0xE9, 0x99, 0xAA, 0xF8, 0xE6, 0x98,
         0xAD, 0xFE, 0x9A, 0xCE, 0xB4, 0x9E, 0x87, 0xD6, 0xE5, 0xE9, 0xA0,
         0xC5, 0xE7, 0xAB, 0xE1, 0x85, 0xAC, 0xD1, 0x9D, 0xEF, 0xBA, 0xCA,
         0x98, 0xD3, 0xA1, 0xA3, 0xAE, 0xFE, 0x01}};

template <>
std::pair<boost::multiprecision::uint1024_t, std::vector<uint8_t>>
    LEB128CodecTester<boost::multiprecision::uint1024_t>::sample_{
        boost::multiprecision::uint1024_t{
            "100069313486231590772930519078902473361797697894230657273430081157"
            "732675805500963132708477322407536021120113879871393357658789768814"
            "416622492847430639474124377767893424865485276302219601246094119453"
            "082952085005768838150682342462881473913110540827237163350510684586"
            "2982399472459384797163048353563296242241"},
        {0xC1, 0xB4, 0xC6, 0xC5, 0xA6, 0xE7, 0xCE, 0x8C, 0x9C, 0xCA, 0xBC,
         0xF5, 0x9C, 0x86, 0xC8, 0xBD, 0xBD, 0xF7, 0x8F, 0xEF, 0xAB, 0xAD,
         0x99, 0xE1, 0xAF, 0xEA, 0xCF, 0xB7, 0xAA, 0xA4, 0x85, 0xE3, 0x96,
         0x84, 0xF2, 0xA0, 0x89, 0xE6, 0xB4, 0xFB, 0xAF, 0xD9, 0x92, 0xF3,
         0x8E, 0x96, 0xE6, 0xAB, 0xE4, 0xF1, 0xB6, 0xE0, 0xE6, 0xCE, 0x88,
         0xA6, 0xF9, 0xB4, 0xAC, 0xCF, 0xA4, 0xFE, 0xA4, 0xAD, 0xD2, 0xB7,
         0xF0, 0xE3, 0xD5, 0xAC, 0xAA, 0xFB, 0xFD, 0xA1, 0xB7, 0xF4, 0xB9,
         0xF5, 0x88, 0x91, 0xF6, 0xC2, 0xCD, 0xF2, 0x85, 0xB7, 0xB6, 0xD3,
         0x81, 0xFA, 0x96, 0xEB, 0xD4, 0xF3, 0xE9, 0xB1, 0xB4, 0xA7, 0x86,
         0xE1, 0x82, 0xF0, 0xCC, 0xB5, 0xA1, 0xDD, 0xF9, 0xE2, 0xFF, 0xAE,
         0xF9, 0xFC, 0xDB, 0x88, 0xCC, 0x90, 0xE6, 0x8D, 0xA5, 0xA6, 0x84,
         0xC4, 0xCE, 0xA1, 0xAF, 0x81, 0x9C, 0xD7, 0xC6, 0xA5, 0xC4, 0xDB,
         0xFD, 0xA0, 0x9E, 0xC8, 0xDE, 0xB2, 0xC7, 0x9D, 0xBD, 0x83, 0xD9,
         0x2E}};

#endif  // TEST_CORE_CODEC_LEB128_CODEC_TESTER_HPP
